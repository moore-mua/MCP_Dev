{
  "id": "snapshot_1759391619446_ubv5l6nuh",
  "approvalId": "approval_1759391619440_p7u8outws",
  "approvalTitle": "Structure steering document",
  "version": 1,
  "timestamp": "2025-10-02T07:53:39.446Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# プロジェクト構成\n\n## ディレクトリ構成\n\n```\nproject-root/\n├── .spec-workflow/        # Spec Workflow 用のドキュメントとテンプレート\n├── .serena/               # Serena CLI 設定\n├── tools/                 # 補助スクリプト・設定（Codex CLI 用）\n└── src/                   # カウンター実装を配置する予定のディレクトリ（最小構成）\n```\n\n- 実装ファイルは `src/main.py` として配置し、標準出力の挙動を管理する。\n- テストが必要になった場合は `tests/` を新設し、簡易的な検証スクリプトを配置する。\n\n## 命名規則\n\n### ファイル\n- 実装ファイル: `snake_case`（例: `main.py`）。\n- ユーティリティ: `snake_case`（例: `time_utils.py`）。\n- テスト: `test_*.py` 形式（例: `test_main.py`）。\n\n### コード\n- クラス: `PascalCase`。\n- 関数・メソッド: `snake_case`。\n- 定数: `UPPER_SNAKE_CASE`。\n- 変数: `snake_case`。\n\n## インポートパターン\n\n### インポート順序\n1. 標準ライブラリ (`time`, `datetime` など)\n2. プロジェクト内モジュール（必要になった場合）\n\n### モジュール構成\n- プロジェクト内では絶対インポート（`from src.timer import ...`）を基本とする。\n- 最小構成では単一ファイルのため、追加モジュール発生時に適切にパッケージ化する。\n\n## コード構造パターン\n\n### モジュール構成\n1. インポート宣言\n2. 定数・設定値（例: カウンター上限 `MAX_COUNT = 100`）\n3. 補助関数（例: フォーマット関数）\n4. メインループ関数\n5. ガード節 `if __name__ == \"__main__\":` によるエントリポイント\n\n### 関数構成\n- 入力バリデーションや初期化を冒頭で行う。\n- ループ内のカウンター更新 → 時刻取得 → 出力 → 待機を一貫した順序で実行。\n- エラー処理が必要な場合は `try/except` ブロックでラップし、終了時にメッセージを表示。\n\n### ファイル構成原則\n- 単一責務を重視し、カウンター制御と出力処理を同一ファイルで扱う。\n- 実装が増える場合は `timer.py` など機能別に分割し、`main.py` はエントリポイントとして残す。\n\n## コード組織原則\n1. **Single Responsibility**: 各ファイルは明確な役割（エントリポイント、ユーティリティなど）に限定する。\n2. **Modularity**: 後から拡張しやすいよう関数単位でロジックを切り出す。\n3. **Testability**: カウンター更新ロジックを関数化し、将来的に単体テストが書ける構造に保つ。\n4. **Consistency**: PEP 8 に沿ったスタイルを維持し、共通のパターンを踏襲する。\n\n## モジュール境界\n- `main.py`: エントリポイントおよび無限ループ制御。\n- 将来的に `timer.py` 等を追加する場合、出力フォーマットや時間計測をモジュール化し、`main.py` から呼び出す。\n- 依存方向はエントリポイント → ユーティリティの一方向とする。\n\n## コードサイズガイドライン\n- ファイル: 200 行以内を目安とし、極力コンパクトに保つ。\n- 関数: 40 行以内を目安にし、責務が増える場合は分割を検討。\n- ネスト深度: 3 レベル以内。\n\n## ドキュメント基準\n- 主要な公開関数には docstring を追加し、引数と動作を明示する。\n- README に実行手順と依存関係を記載（最小構成でも基本説明を含める）。\n- 複雑な制御が発生した場合は、ファイル冒頭に簡潔なコメントを追記する。\n",
  "fileStats": {
    "size": 3739,
    "lines": 77,
    "lastModified": "2025-10-02T07:53:36.690Z"
  },
  "comments": []
}