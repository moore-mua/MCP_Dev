{
  "id": "snapshot_1759391820330_3lra78uwp",
  "approvalId": "approval_1759391820320_oajotyg4r",
  "approvalTitle": "heartbeat-counter requirements",
  "version": 1,
  "timestamp": "2025-10-02T07:57:00.330Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Requirements Document\n\n## Introduction\nシングルファイルの Python CLI で 1 秒ごとにカウンターと現在時刻を標準出力へ表示する最小構成機能を定義する。カウンターは 0 から 100 まで巡回し、環境動作確認用のハートビートとして利用できるようにする。\n\n## Alignment with Product Vision\n本機能は product.md に記載された「シンプル最優先」「ひと目で状況把握」「ポータビリティ」の原則を満たす。CLI 上で循環カウンターとタイムスタンプを提示することで、Python 実行環境の稼働と時刻整合性を即時に確認できる体験を提供する。\n\n## Requirements\n\n### Requirement 1\n\n**User Story:** Python 環境の動作確認をしたい開発者として、1 秒ごとにカウンターと現在時刻を出力する CLI を利用したい。そうすることでランタイムが停止せず更新され続けるかを一目で把握できる。\n\n#### Acceptance Criteria\n1. WHEN スクリプトを `python main.py` で起動した THEN システム SHALL 直ちに初回行を標準出力へ表示する。\n2. WHEN 1 秒が経過した THEN システム SHALL カウンターを +1 して現在時刻と共に新しい行を表示する。\n3. IF 実行中に標準出力がパイプやファイルへリダイレクトされている THEN システム SHALL 同じ形式の出力を継続し、バッファリングを避けるために毎行後にフラッシュする。\n\n### Requirement 2\n\n**User Story:** 端末ログの読みやすさを確保したいオペレーターとして、カウンターが 100 に達したら 0 に戻る循環挙動を求める。そうすることで出力が際限なく増えず、周期性で状態を把握できる。\n\n#### Acceptance Criteria\n1. WHEN カウンターが 100 を表示した次の周期 THEN システム SHALL カウンターを 0 にリセットして出力する。\n2. IF カウンターをリセットした直後でも 1 秒周期が維持されている THEN システム SHALL 次行を 1 秒後に 1 へ更新して表示する。\n\n### Requirement 3\n\n**User Story:** 学習用途でスクリプトを紹介する講師として、Ctrl+C で容易に停止して終了を示したい。そうすることで受講者が安全にセッションを終えられる。\n\n#### Acceptance Criteria\n1. WHEN ユーザーが `Ctrl+C` (SIGINT) を送信した THEN システム SHALL 例外を捕捉し、終了メッセージを 1 行出力して正常終了コードでプロセスを終了する。\n2. IF ループ処理内で予期せぬ例外が発生した THEN システム SHALL 例外内容を標準エラーに通知し、プロセスを終了する。\n\n## Non-Functional Requirements\n\n### Code Architecture and Modularity\n- 単一ファイルであっても関数に処理を分割し、将来的なテスト容易性を確保する。\n- カウンター制御と出力フォーマットを関数化し、再利用性を意識する。\n- グローバルな可変状態を最小限に抑え、引数・返り値で状態を渡す。\n\n### Performance\n- 1 秒周期を維持するため、各ループでの処理時間を 100ms 未満に抑える。\n- 長時間実行時も CPU 使用率がアイドルに近い状態を保つ。\n\n### Security\n- 外部入力を扱わないため追加要件はなし。標準出力以外への書き込みを行わない。\n\n### Reliability\n- 無限ループが継続する間、周期が乱れた場合は標準エラーに通知できるよう例外処理を備える。\n- SIGINT 受信時にはリソース（標準出力）のフラッシュを保証してから終了する。\n\n### Usability\n- 出力フォーマットは `[{timestamp}] count={value}` のように読みやすい固定フォーマットとし、時刻は ISO 8601 形式を用いる。\n- README に実行方法と停止方法を記載する。\n",
  "fileStats": {
    "size": 3963,
    "lines": 57,
    "lastModified": "2025-10-02T07:56:57.342Z"
  },
  "comments": []
}